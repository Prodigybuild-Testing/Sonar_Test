# Sonar_Test """ This is a pure Python implementation of the quick sort algorithm. For doctests run following command: python -m doctest -v quick_sort.py or python3 -m doctest -v quick_sort.py For manual testing run: python quick_sort.py """ def quick_sort(collection: list) -> list: """ :param collection: some mutable ordered collection with heterogeneous comparable items inside :return: the same collection ordered by ascending Examples: >>> quick_sort([0, 5, 3, 2, 2]) [0, 2, 2, 3, 5] >>> quick_sort([]) [] >>> quick_sort([-2, -5, -45]) [-45, -5, -2] """ if len(collection) <= 1: return collection pivot = collection[len(collection) // 2] left = [x for x in collection if x < pivot] middle = [x for x in collection if x == pivot] right = [x for x in collection if x > pivot] return quick_sort(left) + middle + quick_sort(right) if __name__ == "__main__": import doctest doctest.testmod() user_input = input("Enter numbers separated by a comma:\n").strip() unsorted = [int(item) for item in user_input.split(",")] print(*quick_sort(unsorted), sep=",")